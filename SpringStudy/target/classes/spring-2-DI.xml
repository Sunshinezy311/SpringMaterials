<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--           default-autowire="byName">-->

    <!--2. 依赖注入:
    a. （或有时称为布线）有助于把这些类粘合在一起，同时保持他们独立。
    b. DI主要有两种变体和下面的两个子章将结合实例涵盖它们：
        Constructor-based dependency injection  基于构造函数的依赖注入
        当容器调用带有多个参数的构造函数类时，实现基于构造函数的 DI，每个代表在其他类中的一个依赖关系。
        Setter-based dependency injection 基于Setter函数
        基于 setter 方法的 DI 是通过在调用无参数的构造函数或无参数的静态工厂方法实例化 bean 之后
        容器调用 beans 的 setter 方法来实现的
    c. 代码是 DI 原理的清洗机，当对象与它们的依赖关系被提供时，解耦效果更明显。
    对象不查找它的依赖关系，也不知道依赖关系的位置或类，而这一切都由 Spring 框架控制的。。-->

    <!--2.1 基于构造函数的依赖注入 -->
    <bean id="constructdimain" class="di.constructor_di.ConstructDiMain">
        <!--2.2 初始化顺序根据xml的顺序进行-->
        <constructor-arg ref="constructdi2"/>
        <constructor-arg ref="constructdi1"/>
    </bean>
    <bean id="constructdi1" class="di.constructor_di.ConstructDependence1"/>
    <bean id="constructdi2" class="di.constructor_di.ConstructDependence2"/>


    <!--基于设值函数的依赖注入-->
    <bean id="setterDiMian" class="di.setter_di.SetterDiMian">
        <property name="setterDependence1" ref="setterDependence1"/>
    </bean>
    <bean id="setterDependence1" class="di.setter_di.SetterDependence1"/>
    <!--两种方式俄唯一的区别就是在基于构造函数注入中，我们使用的是〈bean〉标签中的〈constructor-arg〉元素，
    而在基于设值函数的注入中，我们使用的是〈bean〉标签中的〈property〉元素。
    第二个你需要注意的点是，如果你要把一个引用传递给一个对象，那么你需要使用 标签的 ref 属性，
    而如果你要直接传递一个值，那么你应该使用 value 属性。
    -->


    <!--2.3 依赖注入的应用-->
    <!--2.3.1 注入内部Beans-->
    <bean id="innerBeansDiMain" class="di.applications_dl.InnerBeansDiMain">
        <property name="InnerBeansDependence1">
            <bean id="InnerBeansDependence1" class="di.applications_dl.InnerBeansDependence1"/>
        </property>
    </bean>

    <!--2.3.2 注入集合-->
    <!--如果你想传递多个值，如 Java Collection 类型 List、Set、Map 和 Properties，应该怎么做呢。
    为了处理这种情况，Spring 提供了四种类型的集合的配置元素:
         元素	描述
        <list>	它有助于连线，如注入一列值，允许重复。
        <set>	它有助于连线一组值，但不能重复。
        <map>	它可以用来注入名称-值对的集合，其中名称和值可以是任何类型。
        <props>	它可以用来注入名称-值对的集合，其中名称和值都是字符串类型。
    -->
    <bean id="collectionDiMain" class="di.applications_dl.CollectionDiMain">
        <property name="addressList">
            <list>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </list>
        </property>

        <property name="addressSet">
            <set>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </set>
        </property>

        <property name="addressMap">
            <map>
                <entry key="1" value="INDIA"/>
                <entry key="2" value="Pakistan"/>
                <entry key="3" value="USA"/>
                <entry key="4" value="USA"/>
            </map>
        </property>

        <property name="addressProp">
            <props>
                <prop key="one">INDIA</prop>
                <prop key="two">Pakistan</prop>
                <prop key="three">USA</prop>
                <prop key="four">USA</prop>
            </props>
        </property>
    </bean>


    <!-- Bean Definition to handle references and values -->
<!--    <bean id="..." class="...">-->
<!--        &lt;!&ndash; Passing bean reference  for java.util.List &ndash;&gt;-->
<!--        <property name="addressList">-->
<!--            <list>-->
<!--                <ref bean="address1"/>-->
<!--                <ref bean="address2"/>-->
<!--                <value>Pakistan</value>-->
<!--            </list>-->
<!--        </property>-->

<!--        &lt;!&ndash; Passing bean reference  for java.util.Set &ndash;&gt;-->
<!--        <property name="addressSet">-->
<!--            <set>-->
<!--                <ref bean="address1"/>-->
<!--                <ref bean="address2"/>-->
<!--                <value>Pakistan</value>-->
<!--            </set>-->
<!--        </property>-->

<!--        &lt;!&ndash; Passing bean reference  for java.util.Map &ndash;&gt;-->
<!--        <property name="addressMap">-->
<!--            <map>-->
<!--                <entry key="one" value="INDIA"/>-->
<!--                <entry key ="two" value-ref="address1"/>-->
<!--                <entry key ="three" value-ref="address2"/>-->
<!--            </map>-->
<!--        </property>-->

<!--    </bean>-->
</beans>