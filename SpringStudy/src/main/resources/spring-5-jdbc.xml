<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!--5.1 JDBC框架
        JDBC 框架负责所有的低层细节，从开始打开连接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。
        -->
    <!--5.2 JDBC示例-->
    <bean id="dataSource" class="org.springframework.g_jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.g_jdbc.Driver"/>
        <property name="url" value="g_jdbc:mysql://localhost:3306/TEST"/>
        <property name="username" value="root"/>
        <property name="password" value="ZYzyZY931215*"/>
    </bean>
    <bean id="studentJDBCTemplate"
          class="g_jdbc.StudentJDBCTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--5.3事务管理-->
    <!--
        一个数据库事务是一个被视为单一的工作单元的操作序列。这些操作应该要么完整地执行，要么完全不执行。
    事务管理是一个重要组成部分，事务的概念可以描述为具有以下四个关键属性说成是ACID：
        1.原子性：事务应该当作一个单独单元的操作，这意味着整个序列操作要么是成功，要么是失败的。
        2.一致性：这表示数据库的引用完整性的一致性，表中唯一的主键等。
        3.隔离性：可能同时处理很多有相同的数据集的事务，每个事务应该与其他事务隔离，以防止数据损坏。
        4.持久性：一个事务一旦完成全部操作后，这个事务的结果必须是永久性的，不能因系统故障而从数据库中删除。

        RDBMS面向企业应用程序，以确保数据完整性和一致性。而一个真正的RDBMS数据库系统将为每个事务保证所有的四个属性。
    使用 SQL 发布到数据库中的事务的简单视图如下：
        1.使用 begin h_transaction 命令开始事务。
        2.使用 SQL 查询语句执行各种删除、更新或插入操作。
        3.如果所有的操作都成功，则执行提交操作，否则回滚所有操作。
        Spring框架在不同的底层事务管理 APIs的顶部提供了一个抽象层。

        Spring的事务支持旨在通过添加事务能力到POJOs来提供给EJB事务一个选择方案。Spring支持编程式和声明式事务管理。
    EJBs需要一个应用程序服务器，但Spring事务管理可以在不需要应用程序服务器的情况下实现。
    -->

    <!--5.4 局部事物vs.全局事务
        局部事务是特定于一个单一的事务资源，如一个JDBC连接，
        全局事务可以跨多个事务资源事务，如在一个分布式系统中的事务。

        局部事务管理在一个集中的计算环境中是有用的，该计算环境中应用程序组件和资源位于一个单位点，
    而事务管理只涉及到一个运行在一个单一机器中的本地数据管理器。局部事务更容易实现。
        全局事务管理需要在分布式计算环境中，所有的资源都分布在多个系统中。在这种情况下事务管理需要同时在局部和全局范围内进行。
    分布式或全局事务跨多个系统执行，它的执行需要全局事务管理系统和所有相关系统的局部数据管理人员之间的协调。-->

    <!--初始化事务管理-->
    <bean id="transactionManager"
          class="org.springframework.g_jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--5.5 编程式 vs. 声明式
        Spring 支持两种类型的事务管理:
            编程式事务管理 ：这意味着你在编程的帮助下有管理事务。这给了你极大的灵活性，但却很难维护。
            声明式事务管理 ：这意味着你从业务代码中分离事务管理。你仅仅使用注释或 XML 配置来管理事务。

        声明式事务管理比编程式事务管理更可取，尽管它不如编程式事务管理灵活，但它允许你通过代码控制事务。
        但作为一种横切关注点，声明式事务管理可以使用 AOP 方法进行模块化。Spring 支持使用 Spring AOP 框架的声明式事务管理。-->
    <!--5.5.1 编程式事务管理-->
    <bean id="stdProgTransJdbcTemp"
          class="h_transaction.programmatic.StdProgTransJdbcTemp">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--5.5.2 声名式事务管理-->
    <!--  xmlns:tx="http://www.springframework.org/schema/tx"  -->
    <tx:advice id="txAdvice"  transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="create"/>
        </tx:attributes>
    </tx:advice>

    <!--  xmlns:f_aop="http://www.springframework.org/schema/aop"  -->
    <aop:config>
        <aop:pointcut id="createOperation"
                      expression="execution(* h_transaction.reputation.StdRepTransJdbcTemp.create(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="createOperation"/>
    </aop:config>

    <bean id="stdRepTransJdbcTemp"
          class="h_transaction.reputation.StdRepTransJdbcTemp">
        <property name="dataSource"  ref="dataSource" />
    </bean>
</beans>