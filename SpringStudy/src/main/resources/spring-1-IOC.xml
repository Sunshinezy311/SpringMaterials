<?xml version="1.0" encoding="UTF-8"?>
<!--①xmlns="http://www.springframework.org/schema/beans"，默认命名空间：它没有空间名，用于Spring Bean的定义；
②xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"，xsi命名空间：这个命名空间用于为每个文档中命名空间指定
相应的Schema样式文件，是标准组织定义的标准命名空间。-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--1. IOC 容器：
    a. 具有依赖注入功能的容器，它可以创建对象，
    b. IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。
    c. 通常new一个实例，控制权由程序员控制，而"控制反转"是指new实例工作不由程序员来做而是交给Spring容器来做。
    d. 在Spring中BeanFactory是IOC容器的实际代表者。-->

    <!--注意！！使用了context后无需使用bean来加载，否则会导致找不到该类！！-->
    <!--    <bean class="bean_test.multi_bean.BeanImpl1">-->
    <!--        <qualifier value="beanImpl1"/>-->
    <!--    </bean>-->
    <bean id="test1" class="ioc.springtest.TestClass"/>
    <bean id="test2" class="ioc.springtest.Test2Class" init-method="start" destroy-method="destory" lazy-init="true"/>
    <!--<bean id="test2" class="ioc.springtest.Test2Class"/>-->
    <bean id="ApplicationContextAware" class="ioc.springtest.TestApplicationContextAware"/>
    <bean id="BeanAwareName" class="ioc.springtest.TestBeanAware"/>
    <bean id="autoWiringService" class="ioc.springtest.AutoWiringService">
        <!--注意！！无需使用property可以使用default-autowire方法，该方法可以-->
        <property name="autoWiringDAO" ref="autoWiringDAO"/>
    </bean>
    <bean id="autoWiringDAO" class="ioc.springtest.AutoWiringDAO"/>
</beans>